USE sakila;
# Write SQL queries to perform the following tasks using the Sakila database:

# List the number of films per category.
SELECT category.name, count(film_id) FROM film_category
JOIN category
ON category.category_id = film_category.category_id
GROUP BY category.name
ORDER BY count(film_id) DESC;

# Retrieve the store ID, city, and country for each store.
select * from store;
select * from address;
select * from city;
select * from country;
SELECT store.store_id, city.city, country.country FROM store
JOIN address
ON address.address_id = store.address_id
JOIN city
ON address.city_id = city.city_id
JOIN country
ON city.country_id = country.country_id;
# Calculate the total revenue generated by each store in dollars.
select * from store;
select sum(amount), store_id from payment
JOIN customer 
ON customer.customer_id = payment.customer_id
GROUP BY customer.store_id;
SELECT * FROM category;
# Determine the average running time of films for each category.
SELECT category.name, avg(film.length) FROM film_category
JOIN film
ON film.film_id = film_category.film_id
JOIN category
ON film_category.category_id = category.category_id
GROUP BY category.name;

#Bonus:
# Identify the film categories with the longest average running time.
SELECT category.name, avg(film.length) FROM film_category
JOIN film
ON film.film_id = film_category.film_id
JOIN category
ON film_category.category_id = category.category_id
GROUP BY category.name
ORDER BY avg(film.length) DESC
LIMIT 3;

# Display the top 10 most frequently rented movies in descending order.
SELECT film.title, count(film.title) AS rented FROM rental
JOIN inventory 
ON inventory.inventory_id = rental.inventory_id
JOIN film
ON inventory.film_id = film.film_id
GROUP BY film.title
ORDER BY rented DESC
LIMIT 10;

# Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM film WHERE title = "Academy Dinosaur";
SELECT film.title, inventory.store_id FROM inventory
JOIN film
ON film.film_id = inventory.inventory_id
WHERE film.title = "Academy Dinosaur" AND inventory.store_id = 1;
/*Provide a list of all distinct film titles, along with their availability status in the inventory. 
Include a column indicating whether each title is 'Available' or 'NOT available.' 
Note that there are 42 titles that are not in the inventory, and this information can be obtained 
using a CASE statement combined with IFNULL. */
SELECT 
    f.title,
    CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'Not in Inventory'
        WHEN COUNT(i.inventory_id) > COUNT(r.rental_id) THEN 'Available'
        ELSE 'Not Available'
    END AS availability_status
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN rental r ON i.inventory_id = r.inventory_id AND r.return_date IS NULL -- can't say if they don't have a return_date or if they have never been rented
GROUP BY f.title;

/*
SELECT 
    *
FROM film f
LEFT JOIN inventory i ON f.film_id = i.film_id
LEFT JOIN rental r ON i.inventory_id = r.inventory_id AND r.return_date IS NULL; */
